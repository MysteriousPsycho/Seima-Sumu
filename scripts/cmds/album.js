const axios = require('axios');
const fs = require('fs');

module.exports = {
  config: {
    name: "album",
    aliases: [],
    version: "2.1",
    author: "ArYAN",
    countDown: 2,
    role: 0,
    shortDescription: {
      vi: "L·∫•y m·ªôt video ng·∫´u nhi√™n t·ª´ th·ªÉ lo·∫°i ƒë√£ ch·ªâ ƒë·ªãnh.",
      en: "Get a random video from the specified category."
    },
    longDescription: {
      vi: "L·ªánh n√†y cho ph√©p b·∫°n l·∫•y m·ªôt video ng·∫´u nhi√™n t·ª´ c√°c th·ªÉ lo·∫°i kh√°c nhau nh∆∞ Anime, Lofi, v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c n·ªØa. B·∫°n c√≥ th·ªÉ xem ho·∫∑c stream video tr·ª±c ti·∫øp t·ª´ nh·ªØng th·ªÉ lo·∫°i n√†y.",
      en: "This command allows you to fetch a random video from different categories such as Anime, Lofi, and more. You can view or stream videos directly from these categories."
    },
    category: "album",
    guide: {
      en: "{pn} <category>\n- Fetch a random video from the specified category."
    }
  },
  onStart: async ({ api, event, args }) => {
    if (!args[0]) {
      const message = "üëë| ùóîùóüùóïùó®ùó†ùó¶\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n1 - Anime Videos\n2 - Lofi Videos\nMore albums coming soon.\n\nPlease reply with valid album category.";
      api.sendMessage(message, event.threadID, (error, info) => {
        if (error) return console.error(error);
        global.GoatBot.onReply.set(info.messageID, {
          commandName: module.exports.config.name,
          type: "reply",
          messageID: info.messageID,
          author: event.senderID,
        });
      });
    } else {
      const command = args.shift().toLowerCase();
      const category = getCategoryName(command);

      if (!category) {
        api.sendMessage(`‚öôÔ∏è Invalid category. Please enter a valid album category.`, event.threadID);
        return;
      }

      if (command === "stream") {
        api.sendMessage(`üëë| Streaming video from category ${category}, please wait......`, event.threadID);
        streamVideo(api, event.threadID, category);
      } else {
        api.sendMessage(`Fetching video from category: ${category}`, event.threadID);
        fetchVideo(api, event.threadID, category);
      }
    }
  },
  onReply: async ({ api, event, Reply }) => {
    if (event.type === "message_reply" && Reply.author === event.senderID) {
      const category = getCategoryName(event.body);

      if (!category) {
        api.sendMessage(`‚ùå| Invalid category. Please enter a valid album category.`, event.threadID);
        return;
      }

      api.sendMessage(`‚öôÔ∏è Fetching video from category: ${category}, please wait....`, event.threadID);
      fetchVideo(api, event.threadID, category);
    }
  }
};

function getCategoryName(command) {
  switch (command) {
    case "1":
      return "anime";
    case "2":
      return "lofi";
    // Add more cases for other categories as needed
    default:
      return null; // Return null for unrecognized categories
  }
}

async function fetchVideo(api, threadID, category) {
  try {
    const response = await axios.get(`https://fe79fefc-56db-4e79-845a-623dfc619745-00-hg2l3xvcfoq0.pike.replit.dev/album?category=${encodeURIComponent(category.toLowerCase())}`);
    const video = response.data;
    const videoBuffer = await axios.get(video.url, { responseType: 'arraybuffer' });
    const filename = `${category}_${Date.now()}.mp4`;
    fs.writeFileSync(filename, videoBuffer.data);
    api.sendMessage({
      body: `üëë|ùóîùóüùóïùó®ùó†\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüìù ùóßùó∂ùòÅùóπùó≤: ${video.title}\n‚öôÔ∏è ùóñùóÆùòÅùó≤ùó¥ùóºùóøùòÜ: ${category}`,
      attachment: fs.createReadStream(filename)
    }, threadID, () => fs.unlinkSync(filename)); // Delete file after sending
  } catch (error) {
    console.error(error);
    if (error.response && error.response.status === 404) {
      api.sendMessage(`The category "${category}" could not be found. Please check the available categories.`, threadID);
    } else {
      api.sendMessage(`An error occurred while fetching the video: ${error.message}`, threadID);
    }
  }
}

async function streamVideo(api, threadID, category) {
  try {
    const response = await axios.get(`https://fe79fefc-56db-4e79-845a-623dfc619745-00-hg2l3xvcfoq0.pike.replit.dev/album?category=${encodeURIComponent(category.toLowerCase())}`);
    const video = response.data;
    const videoBuffer = await axios.get(video.url, { responseType: 'arraybuffer' });
    const filename = `${category}_${Date.now()}.mp4`;
    fs.writeFileSync(filename, videoBuffer.data);
    api.sendMessage({
      body: `üëë|ùóîùóüùóïùó®ùó†\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüìù ùóßùó∂ùòÅùóπùó≤: ${video.title}\n‚öôÔ∏è ùóñùóÆùòÅùó≤ùó¥ùóºùóøùòÜ: ${category}`,
      attachment: fs.createReadStream(filename)
    }, threadID, () => fs.unlinkSync(filename)); // Delete file after sending
  } catch (error) {
    console.error(error);
    if (error.response && error.response.status === 404) {
      api.sendMessage(`The category "${category}" could not be found. Please check the available categories.`, threadID);
    } else {
      api.sendMessage(`An error occurred while streaming the video: ${error.message}`, threadID);
    }
  }
}